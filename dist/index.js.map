{"version":3,"file":"index.js","sources":["../src/components/previewTools.tsx","../src/components/preview.tsx","../src/components/countTools.ts","../src/components/searchTools.ts","../src/components/setPaymentLine.tsx"],"sourcesContent":["import type { OutputData } from '@editorjs/editorjs'\nimport type { HeaderData } from '@editorjs/header'\nimport type { LinkToolData } from '@editorjs/link'\nimport type { ListData } from '@editorjs/nested-list'\nimport type { ParagraphData } from '@editorjs/paragraph'\nimport classNames from 'classnames'\nimport type { EmbedData } from 'editorjs-embed'\nimport type { ImageToolData } from 'editorjs-image'\nimport type { QuoteData } from 'editorjs-quote'\nimport type { ReactNode, FC, CSSProperties } from 'react'\nimport { Fragment } from 'react'\n\nimport type { PaymentLineData } from './editorTools/paymentLine'\nimport Styles from './previewTools.module.css'\nimport type { OutputBlockData } from '../index'\n\nexport type Parser<Type extends string = string, Data extends object | undefined = undefined> = (\n  data: OutputBlockData<Type, Data | undefined>,\n) => ReactNode\n\nexport const paragraphParser: Parser<'paragraph', ParagraphData> = ({ id, data }) => {\n  if (!data) return\n  return (\n    <p\n      id={id}\n      className={classNames(Styles['ce-paragraph'], Styles['cdx-block'])}\n      dangerouslySetInnerHTML={{ __html: data.text }}\n    />\n  )\n}\n\nexport const imageParser: Parser<'image', ImageToolData> = ({ id, data }) => {\n  if (!data) return\n  return (\n    <div>\n      <div id={id} className={classNames(data.withBackground && 'bg-[#cdd1e0] p-[15px]')}>\n        <img\n          src={data.file.url}\n          alt={data.caption ?? undefined}\n          className={classNames(\n            data.withBackground && 'max-w-[60%]',\n            'm-auto',\n            data.withBorder && 'border border-[#e8e8eb]',\n            data.stretched && 'w-full',\n          )}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const linkParser: Parser<'link', LinkToolData> = ({ id, data }) => {\n  if (!data) return\n  const anchor = new URL(data.link).hostname\n  return (\n    <div className={Styles['cdx-block']}>\n      <div id={id} className={Styles['link-tool']}>\n        <a\n          className={classNames(\n            Styles['link-tool__content'],\n            Styles['link-tool__content--rendered'],\n          )}\n          target=\"_blank\"\n          rel=\"nofollow noindex noreferrer\"\n          href={data.link}\n        >\n          <div\n            className={Styles['link-tool__image']}\n            style={{\n              backgroundImage: `url(${data.meta.image.url})`,\n            }}\n          />\n          <div className={Styles['link-tool__title']}>{data.meta.title}</div>\n          <p className={Styles['link-tool__description']}>{data.meta.description}</p>\n          <span className={Styles['link-tool__anchor']}>{anchor}</span>\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport const headerParser: Parser<'header', HeaderData> = ({ id, data }) => {\n  if (!data) return\n  if (data.level === 2)\n    return (\n      <h2\n        id={id}\n        className={Styles['ce-header']}\n        data-placeholder=\"へッダー\"\n        style={{\n          fontSize: '1.25rem',\n          fontWeight: 'bold',\n        }}\n      >\n        {data.text}\n      </h2>\n    )\n  if (data.level === 3)\n    return (\n      <h3\n        id={id}\n        className={Styles['ce-header']}\n        data-placeholder=\"へッダー\"\n        style={{\n          fontSize: '1.125rem',\n          fontWeight: 'bold',\n        }}\n      >\n        {data.text}\n      </h3>\n    )\n  else\n    return (\n      <h2\n        id={id}\n        className={Styles['ce-header']}\n        data-placeholder=\"へッダー\"\n        style={{\n          fontSize: '1rem',\n          fontWeight: 'bold',\n        }}\n      >\n        {data.text}\n      </h2>\n    )\n}\n\nexport const listParser: Parser<'list', ListData> = ({ id, data }) => {\n  if (!data) return\n  const orderStyle = data.style\n  const orderStyleClass =\n    orderStyle === 'ordered' ? 'cdx-nested-list--ordered' : 'cdx-nested-list--unordered'\n  const createItem = (items: ListData['items']): ReactNode[] => {\n    return items.map((item, i) => (\n      <li className={Styles['cdx-nested-list__item']} key={i}>\n        <div className={Styles['cdx-nested-list__item-body']}>\n          <div\n            className={Styles['cdx-nested-list__item-content']}\n            dangerouslySetInnerHTML={{\n              __html: item.content ?? '',\n            }}\n          />\n          {item.items.length !== 0 && orderStyle === 'ordered' && (\n            <ol\n              className={classNames(\n                Styles['cdx-nested-list'],\n                Styles['cdx-nested-list__item-children'],\n                Styles[orderStyleClass],\n              )}\n            >\n              {createItem(item.items)}\n            </ol>\n          )}\n          {item.items.length !== 0 && orderStyle === 'unordered' && (\n            <ul\n              className={classNames(\n                Styles['cdx-nested-list'],\n                Styles['cdx-nested-list__item-children'],\n                Styles[orderStyleClass],\n              )}\n            >\n              {createItem(item.items)}\n            </ul>\n          )}\n        </div>\n      </li>\n    ))\n  }\n\n  if (data.style === 'ordered') {\n    return (\n      <ol\n        id={id}\n        className={classNames(\n          Styles['cdx-nested-list'],\n          Styles['cdx-block'],\n          Styles[orderStyleClass],\n        )}\n      >\n        {createItem(data.items)}\n      </ol>\n    )\n  } else {\n    return (\n      <ul\n        id={id}\n        className={classNames(\n          Styles['cdx-nested-list'],\n          Styles['cdx-block'],\n          Styles[orderStyleClass],\n        )}\n      >\n        {createItem(data.items)}\n      </ul>\n    )\n  }\n}\n\nexport const embedParser: Parser<'embed', EmbedData> = ({ id, data }) => {\n  if (!data) return\n  return (\n    <div className={Styles['cdx-block']}>\n      <div id={id} className={Styles['embed-tool']}>\n        <iframe\n          frameBorder=\"0\"\n          src={data.embed}\n          height=\"320\"\n          className={Styles['embed-tool__content']}\n        ></iframe>\n      </div>\n    </div>\n  )\n}\n\nexport const quoteParser: Parser<'quote', QuoteData> = ({ id, data }) => {\n  if (!data) return\n  const caption = data.caption.replace(/<br\\s*\\/?>/gi, '')\n  return (\n    <blockquote id={id} className={classNames(Styles['cdx-block'], Styles['cdx-quote'])}>\n      <div\n        className={classNames(Styles['cdx-input'], Styles['cdx-quote__text'])}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n        }}\n      >\n        <span\n          dangerouslySetInnerHTML={{\n            __html: data.text,\n          }}\n        />\n        <cite\n          style={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            color: '#707684',\n          }}\n          dangerouslySetInnerHTML={{\n            __html: caption,\n          }}\n        />\n      </div>\n    </blockquote>\n  )\n}\n\nexport const paymentLineParser: Parser<'payment', PaymentLineData> = ({ id }) => {\n  return (\n    <div id={id} className={Styles['payment']}>\n      このラインより先を有料にする\n    </div>\n  )\n}\n\nexport const parser = (\n  plugins: {\n    [key in string]: Parser\n  } = {},\n) => {\n  const parsers = Object.assign({}, plugins)\n\n  const parse = (blocks: OutputData['blocks']): Array<ReactNode> => {\n    return blocks.map(_mapper)\n  }\n\n  const _mapper = (block: OutputBlockData, i: number) => {\n    if (parsers[block.type]) {\n      return (\n        <div className={Styles['ce-block']} key={i}>\n          <div className={Styles['cdx-block']}>{parsers[block.type](block)}</div>\n        </div>\n      )\n    } else throw new ParseFunctionError(block.type)\n  }\n\n  return {\n    parse,\n  }\n}\n\nclass ParseFunctionError extends Error {\n  constructor(type: string) {\n    super(`\\x1b[31m The Parser function of type \"${type}\" is not defined. \\n\n    Define your custom parser functions as: \\x1b[34mhttps://github.com/pavittarx/editorjs-html#extend-for-custom-blocks \\x1b[0m`)\n    this.name = 'ParseFunctionError'\n  }\n}\n\nexport const paymentButton: FC<{\n  key?: string\n  value?: boolean\n  onClick?: () => void\n}> = ({ key, value, onClick }): ReactNode => (\n  <button\n    key={key}\n    className={value ? Styles['payment'] : Styles['payment-button']}\n    onClick={onClick}\n  >\n    このラインより先を有料にする\n  </button>\n)\n\nexport const indexParser: FC<OutputBlockData<'header', HeaderData>[]> = (headers) => {\n  const onClickLink = (headerId?: string) => {\n    if (typeof document !== 'undefined' && headerId) {\n      const el = document.getElementById(headerId)\n      el?.scrollIntoView({ behavior: 'smooth' })\n    }\n  }\n\n  const baseStyle: CSSProperties = {\n    cursor: 'pointer',\n    margin: '1rem',\n  }\n\n  const h2Style: CSSProperties = {\n    listStyle: 'none',\n    fontSize: '1rem',\n    lineHeight: '1.5rem',\n    ...baseStyle,\n  }\n  const h3Style: CSSProperties = {\n    paddingLeft: '0.5rem',\n    listStyle: 'none',\n    fontSize: '0.875rem',\n    lineHeight: '1.25rem',\n    ...baseStyle,\n  }\n  const otherStyle: CSSProperties = {\n    paddingLeft: '1rem',\n    listStyle: 'none',\n    ...baseStyle,\n  }\n\n  return (\n    <div\n      style={{\n        backgroundColor: '#FDFDFD',\n      }}\n    >\n      <p\n        style={{\n          textAlign: 'center',\n          color: '#A3A3A3',\n          margin: 'o.5rem',\n        }}\n      >\n        目次\n      </p>\n      <ul\n        style={{\n          color: '#3F3F3F',\n          listStyleType: 'decimal',\n          listStylePosition: 'inside',\n        }}\n      >\n        {headers.map((header, i) => (\n          <Fragment key={header.id}>\n            <li\n              style={(() => {\n                // h2の時\n                if (header.data.level === 2) return h2Style\n                // h2の時\n                else if (header.data.level === 3) return h3Style\n                else otherStyle\n              })()}\n              onClick={() => onClickLink(header.id)}\n            >\n              {header.data.text}\n            </li>\n            {headers.length - 1 !== i && (\n              <hr\n                style={{\n                  color: '#A3A3A3',\n                  opacity: 0.3,\n                }}\n              />\n            )}\n          </Fragment>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import type { OutputBlockData } from '@editorjs/editorjs'\nimport type { HeaderData } from '@editorjs/header'\nimport type { FC } from 'react'\n\nimport {\n  Parser,\n  paragraphParser,\n  imageParser,\n  linkParser,\n  headerParser,\n  listParser,\n  embedParser,\n  quoteParser,\n  paymentLineParser,\n  parser,\n  indexParser,\n} from './previewTools'\n\nconst editorParser = parser({\n  paragraph: paragraphParser as unknown as Parser,\n  header: headerParser as unknown as Parser,\n  list: listParser as unknown as Parser,\n  payment: paymentLineParser as unknown as Parser,\n  image: imageParser as unknown as Parser,\n  link: linkParser as unknown as Parser,\n  embed: embedParser as unknown as Parser,\n  quote: quoteParser as unknown as Parser,\n})\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Props<Type extends string = string, Data extends object = any> = {\n  blocks?: OutputBlockData<Type, Data>[]\n}\n\nconst Preview: FC<Props> = ({ blocks }) => {\n  if (!blocks) return <div />\n  const html = editorParser.parse(blocks)\n  return <div className=\"w-full\">{html}</div>\n}\n\nconst Index: FC<Props> = ({ blocks }) => {\n  if (!blocks) return <div />\n  // filterしてるのでasで型キャスト\n  const html = indexParser(\n    blocks.filter((block) => block.type === 'header') as OutputBlockData<'header', HeaderData>[],\n  )\n  return <div className=\"w-full\">{html}</div>\n}\n\nexport { Preview, Index }\n","import type { OutputData } from '@editorjs/editorjs'\nimport type { HeaderData } from '@editorjs/header'\nimport type { LinkToolData } from '@editorjs/link'\nimport type { ListData } from '@editorjs/nested-list'\nimport type { ParagraphData } from '@editorjs/paragraph'\nimport type { EmbedData } from 'editorjs-embed'\nimport type { ImageToolData } from 'editorjs-image'\nimport type { QuoteData } from 'editorjs-quote'\nimport { useEffect, useState } from 'react'\n\nexport type Counter<T> = (data: T) => number\n\nexport const useEditorCounter = (data?: OutputData) => {\n  const [textCount, setTextCount] = useState<number>(0)\n\n  useEffect(() => {\n    data ? setTextCount(counter(data)) : setTextCount(0)\n  }, [data])\n\n  return textCount\n}\n\nexport const counter = (data: OutputData): number => {\n  let count = 0\n  data.blocks.forEach((item) => {\n    if (item.type === 'paragraph') count += paragraphCounter(item.data)\n    if (item.type === 'link') count += linkCounter(item.data)\n    if (item.type === 'header') count += headerCounter(item.data)\n    if (item.type === 'list') count += listCounter(item.data)\n    if (item.type === 'embed') count += embedCounter(item.data)\n    if (item.type === 'image') count += imageCounter(item.data)\n    if (item.type === 'quote') count += quoteCounter(item.data)\n  })\n  return count\n}\n\nexport const paragraphCounter: Counter<ParagraphData> = ({ text }) => {\n  return text.length\n}\n\nexport const imageCounter: Counter<ImageToolData> = ({ caption }) => {\n  return caption?.length ?? 0\n}\n\nexport const linkCounter: Counter<LinkToolData> = ({ link }) => {\n  return link.length\n}\n\nexport const headerCounter: Counter<HeaderData> = ({ text }) => {\n  return text.length\n}\n\nexport const listCounter: Counter<ListData> = ({ items }) => {\n  const countItem = (data: ListData['items']): number => {\n    return data\n      .map((item) => {\n        return (item.content?.length ?? 0) + countItem(item.items)\n      })\n      .reduce((sum, currentItem) => sum + currentItem, 0)\n  }\n\n  return countItem(items)\n}\n\nexport const embedCounter: Counter<EmbedData | undefined> = (data) => {\n  return data?.source.length ?? 0\n}\n\nexport const quoteCounter: Counter<QuoteData> = ({ text, caption }) => {\n  return text.length + caption.length\n}\n","import type { OutputData } from '@editorjs/editorjs'\nimport type { HeaderData } from '@editorjs/header'\nimport type { LinkToolData } from '@editorjs/link'\nimport type { ListData } from '@editorjs/nested-list'\nimport type { ParagraphData } from '@editorjs/paragraph'\nimport type { QuoteData } from 'editorjs-quote'\n\nexport const isFoundedPreviewURL = (data: string | OutputData): boolean => {\n  const regex = /https?:\\/\\/[\\w.-]+(:\\d+)?\\/article\\/preview\\/[^/\\s?]+(?:[/?][^\\s]*)?/g\n  let isFounded = false\n  if (typeof data === 'string') {\n    isFounded = !!data.match(regex)\n  } else\n    data.blocks.forEach((block) => {\n      if (block.type === 'paragraph') {\n        if ((block.data as ParagraphData).text.match(regex)) isFounded = true\n      }\n      if (block.type === 'header') {\n        if ((block.data as HeaderData).text.match(regex)) isFounded = true\n      }\n      if (block.type === 'list') {\n        const searchItem = (items: ListData['items']) => {\n          items.forEach((item) => {\n            if (item.content?.match(regex)) {\n              isFounded = true\n            }\n            searchItem(item.items)\n          })\n        }\n        searchItem((block.data as ListData).items)\n      }\n      if (block.type === 'link') {\n        if ((block.data as LinkToolData).link.match(regex)) isFounded = true\n      }\n      if (block.type === 'quote') {\n        if ((block.data as QuoteData).text.match(regex)) isFounded = true\n        if ((block.data as QuoteData).caption.match(regex)) isFounded = true\n      }\n    })\n  return isFounded\n}\n","import type { OutputData } from '@editorjs/editorjs'\nimport React, { useCallback, useMemo, useState } from 'react'\n\nimport {\n  Parser,\n  paragraphParser,\n  imageParser,\n  linkParser,\n  headerParser,\n  listParser,\n  embedParser,\n  quoteParser,\n  parser,\n  paymentButton,\n} from './previewTools'\n\nconst editorParser = parser({\n  paragraph: paragraphParser as unknown as Parser,\n  header: headerParser as unknown as Parser,\n  list: listParser as unknown as Parser,\n  image: imageParser as unknown as Parser,\n  link: linkParser as unknown as Parser,\n  embed: embedParser as unknown as Parser,\n  quote: quoteParser as unknown as Parser,\n})\n\ntype Props = {\n  data: OutputData\n  onChange: (data: OutputData) => void\n}\n\nconst SetPaymentLine: React.FC<Props> = ({ data, onChange }) => {\n  const paymentLineIndex: number | undefined = useMemo(() => {\n    const index: number = data.blocks.findIndex((block) => block.type === 'payment')\n    return index === -1 ? undefined : index\n  }, [data])\n\n  const removePaymentFromData = useMemo(() => {\n    return {\n      ...data,\n      blocks: data.blocks.filter((block) => block.type !== 'payment'),\n    }\n  }, [data])\n\n  const html = useMemo(\n    () => editorParser.parse(removePaymentFromData.blocks),\n    [removePaymentFromData],\n  )\n\n  const [value, setValue] = useState<number | undefined>(paymentLineIndex)\n\n  const onChangeValue = useCallback(\n    (index: number) => {\n      if (value === index) {\n        setValue(undefined)\n        onChange(removePaymentFromData)\n      } else {\n        setValue(index)\n        const lastBlockIndex = removePaymentFromData.blocks.length - 1\n        const newData = {\n          ...removePaymentFromData,\n          blocks: removePaymentFromData.blocks.flatMap((block, i) => {\n            if (i === index) {\n              return [\n                {\n                  id: '----------',\n                  type: 'payment',\n                  data: {},\n                },\n                block,\n              ]\n            }\n            // 最後のblockに追加された場合\n            else if (i === lastBlockIndex && i === index - 1) {\n              return [\n                block,\n                {\n                  id: '----------',\n                  type: 'payment',\n                  data: {},\n                },\n              ]\n            }\n            return block\n          }),\n        }\n        onChange(newData)\n      }\n    },\n    [onChange, removePaymentFromData, value],\n  )\n\n  const mappedHtml = useMemo(() => {\n    return html.flatMap((node, i) => {\n      return [\n        node,\n        paymentButton({\n          key: `${i}-payment-button`,\n          value: value === i + 1,\n          onClick: () => {\n            onChangeValue(i + 1)\n          },\n        }),\n      ]\n    })\n  }, [html, onChangeValue, value])\n\n  return <div className=\"w-full\">{mappedHtml}</div>\n}\n\nexport default SetPaymentLine\n"],"names":["editorParser"],"mappings":"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"}