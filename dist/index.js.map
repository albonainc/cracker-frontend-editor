{"version":3,"file":"index.js","sources":["../src/components/previewTools.tsx","../src/components/preview.tsx","../src/components/countTools.ts","../src/components/searchTools.ts","../src/components/setPaymentLine.tsx"],"sourcesContent":["import type { OutputData } from '@editorjs/editorjs'\nimport type { HeaderData } from '@editorjs/header'\nimport type { LinkToolData } from '@editorjs/link'\nimport type { ListData } from '@editorjs/nested-list'\nimport type { ParagraphData } from '@editorjs/paragraph'\nimport classNames from 'classnames'\nimport type { EmbedData } from 'editorjs-embed'\nimport type { ImageToolData } from 'editorjs-image'\nimport type { QuoteData } from 'editorjs-quote'\nimport type { ReactNode, FC, CSSProperties } from 'react'\nimport { Fragment } from 'react'\n\nimport type { PaymentLineData } from './editorTools/paymentLine'\nimport Styles from './previewTools.module.css'\nimport type { OutputBlockData } from '../index'\n\nexport type Parser<Type extends string = string, Data extends object | undefined = undefined> = (\n  data: OutputBlockData<Type, Data | undefined>,\n) => ReactNode\n\nexport const paragraphParser: Parser<'paragraph', ParagraphData> = ({ id, data }) => {\n  if (!data) return\n  return (\n    <p\n      id={id}\n      className={classNames(Styles['ce-paragraph'], Styles['cdx-block'])}\n      dangerouslySetInnerHTML={{ __html: data.text }}\n    />\n  )\n}\n\nexport const imageParser: Parser<'image', ImageToolData> = ({ id, data }) => {\n  if (!data) return\n  return (\n    <div>\n      <div id={id} className={classNames(data.withBackground && 'bg-[#cdd1e0] p-[15px]')}>\n        <img\n          src={data.file.url}\n          alt={data.caption ?? undefined}\n          className={classNames(\n            data.withBackground && 'max-w-[60%]',\n            'm-auto',\n            data.withBorder && 'border border-[#e8e8eb]',\n            data.stretched && 'w-full',\n          )}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const linkParser: Parser<'link', LinkToolData> = ({ id, data }) => {\n  if (!data) return\n  const anchor = new URL(data.link).hostname\n  return (\n    <div className={Styles['cdx-block']}>\n      <div id={id} className={Styles['link-tool']}>\n        <a\n          className={classNames(\n            Styles['link-tool__content'],\n            Styles['link-tool__content--rendered'],\n          )}\n          target=\"_blank\"\n          rel=\"nofollow noindex noreferrer\"\n          href={data.link}\n        >\n          <div\n            className={Styles['link-tool__image']}\n            style={{\n              backgroundImage: `url(${data.meta.image.url})`,\n            }}\n          />\n          <div className={Styles['link-tool__title']}>{data.meta.title}</div>\n          <p className={Styles['link-tool__description']}>{data.meta.description}</p>\n          <span className={Styles['link-tool__anchor']}>{anchor}</span>\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport const headerParser: Parser<'header', HeaderData> = ({ id, data }) => {\n  if (!data) return\n  if (data.level === 2)\n    return (\n      <h2\n        id={id}\n        className={Styles['ce-header']}\n        data-placeholder=\"へッダー\"\n        style={{\n          fontSize: '1.25rem',\n          fontWeight: 'bold',\n        }}\n      >\n        {data.text}\n      </h2>\n    )\n  if (data.level === 3)\n    return (\n      <h3\n        id={id}\n        className={Styles['ce-header']}\n        data-placeholder=\"へッダー\"\n        style={{\n          fontSize: '1.125rem',\n          fontWeight: 'bold',\n        }}\n      >\n        {data.text}\n      </h3>\n    )\n  else\n    return (\n      <h2\n        id={id}\n        className={Styles['ce-header']}\n        data-placeholder=\"へッダー\"\n        style={{\n          fontSize: '1rem',\n          fontWeight: 'bold',\n        }}\n      >\n        {data.text}\n      </h2>\n    )\n}\n\nexport const listParser: Parser<'list', ListData> = ({ id, data }) => {\n  if (!data) return\n  const orderStyle = data.style\n  const orderStyleClass =\n    orderStyle === 'ordered' ? 'cdx-nested-list--ordered' : 'cdx-nested-list--unordered'\n  const createItem = (items: ListData['items']): ReactNode[] => {\n    return items.map((item, i) => (\n      <li className={Styles['cdx-nested-list__item']} key={i}>\n        <div className={Styles['cdx-nested-list__item-body']}>\n          <div\n            className={Styles['cdx-nested-list__item-content']}\n            dangerouslySetInnerHTML={{\n              __html: item.content ?? '',\n            }}\n          />\n          {item.items.length !== 0 && orderStyle === 'ordered' && (\n            <ol\n              className={classNames(\n                Styles['cdx-nested-list'],\n                Styles['cdx-nested-list__item-children'],\n                Styles[orderStyleClass],\n              )}\n            >\n              {createItem(item.items)}\n            </ol>\n          )}\n          {item.items.length !== 0 && orderStyle === 'unordered' && (\n            <ul\n              className={classNames(\n                Styles['cdx-nested-list'],\n                Styles['cdx-nested-list__item-children'],\n                Styles[orderStyleClass],\n              )}\n            >\n              {createItem(item.items)}\n            </ul>\n          )}\n        </div>\n      </li>\n    ))\n  }\n\n  if (data.style === 'ordered') {\n    return (\n      <ol\n        id={id}\n        className={classNames(\n          Styles['cdx-nested-list'],\n          Styles['cdx-block'],\n          Styles[orderStyleClass],\n        )}\n      >\n        {createItem(data.items)}\n      </ol>\n    )\n  } else {\n    return (\n      <ul\n        id={id}\n        className={classNames(\n          Styles['cdx-nested-list'],\n          Styles['cdx-block'],\n          Styles[orderStyleClass],\n        )}\n      >\n        {createItem(data.items)}\n      </ul>\n    )\n  }\n}\n\nexport const embedParser: Parser<'embed', EmbedData> = ({ id, data }) => {\n  if (!data) return\n  return (\n    <div className={Styles['cdx-block']}>\n      <div id={id} className={Styles['embed-tool']}>\n        <iframe\n          frameBorder=\"0\"\n          src={data.embed}\n          height=\"320\"\n          className={Styles['embed-tool__content']}\n        ></iframe>\n      </div>\n    </div>\n  )\n}\n\nexport const quoteParser: Parser<'quote', QuoteData> = ({ id, data }) => {\n  if (!data) return\n  const caption = data.caption.replace(/<br\\s*\\/?>/gi, '')\n  return (\n    <blockquote id={id} className={classNames(Styles['cdx-block'], Styles['cdx-quote'])}>\n      <div\n        className={classNames(Styles['cdx-input'], Styles['cdx-quote__text'])}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n        }}\n      >\n        <span\n          dangerouslySetInnerHTML={{\n            __html: data.text,\n          }}\n        />\n        <cite\n          style={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            color: '#707684',\n          }}\n          dangerouslySetInnerHTML={{\n            __html: caption,\n          }}\n        />\n      </div>\n    </blockquote>\n  )\n}\n\nexport const paymentLineParser: Parser<'payment', PaymentLineData> = ({ id }) => {\n  return (\n    <div id={id} className={Styles['payment']}>\n      このラインより先を有料にする\n    </div>\n  )\n}\n\nexport const parser = (\n  plugins: {\n    [key in string]: Parser\n  } = {},\n) => {\n  const parsers = Object.assign({}, plugins)\n\n  const parse = (blocks: OutputData['blocks']): Array<ReactNode> => {\n    return blocks.map(_mapper)\n  }\n\n  const _mapper = (block: OutputBlockData, i: number) => {\n    if (parsers[block.type]) {\n      return (\n        <div className={Styles['ce-block']} key={i}>\n          <div className={Styles['cdx-block']}>{parsers[block.type](block)}</div>\n        </div>\n      )\n    } else throw new ParseFunctionError(block.type)\n  }\n\n  return {\n    parse,\n  }\n}\n\nclass ParseFunctionError extends Error {\n  constructor(type: string) {\n    super(`\\x1b[31m The Parser function of type \"${type}\" is not defined. \\n\n    Define your custom parser functions as: \\x1b[34mhttps://github.com/pavittarx/editorjs-html#extend-for-custom-blocks \\x1b[0m`)\n    this.name = 'ParseFunctionError'\n  }\n}\n\nexport const paymentButton: FC<{\n  key?: string\n  value?: boolean\n  onClick?: () => void\n}> = ({ key, value, onClick }): ReactNode => (\n  <button\n    key={key}\n    className={value ? Styles['payment'] : Styles['payment-button']}\n    onClick={onClick}\n  >\n    このラインより先を有料にする\n  </button>\n)\n\nexport const indexParser: FC<OutputBlockData<'header', HeaderData>[]> = (headers) => {\n  const onClickLink = (headerId?: string) => {\n    if (typeof document !== 'undefined' && headerId) {\n      const el = document.getElementById(headerId)\n      el?.scrollIntoView({ behavior: 'smooth' })\n    }\n  }\n\n  const baseStyle: CSSProperties = {\n    cursor: 'pointer',\n    margin: '1rem',\n  }\n\n  const h2Style: CSSProperties = {\n    listStyle: 'none',\n    fontSize: '1rem',\n    lineHeight: '1.5rem',\n    ...baseStyle,\n  }\n  const h3Style: CSSProperties = {\n    paddingLeft: '0.5rem',\n    listStyle: 'none',\n    fontSize: '0.875rem',\n    lineHeight: '1.25rem',\n    ...baseStyle,\n  }\n  const otherStyle: CSSProperties = {\n    paddingLeft: '1rem',\n    listStyle: 'none',\n    ...baseStyle,\n  }\n\n  return (\n    <div\n      style={{\n        backgroundColor: '#FDFDFD',\n      }}\n    >\n      <p\n        style={{\n          textAlign: 'center',\n          color: '#A3A3A3',\n          margin: 'o.5rem',\n        }}\n      >\n        目次\n      </p>\n      <ul\n        style={{\n          color: '#3F3F3F',\n          listStyleType: 'decimal',\n          listStylePosition: 'inside',\n        }}\n      >\n        {headers.map((header, i) => (\n          <Fragment key={header.id}>\n            <li\n              style={(() => {\n                // h2の時\n                if (header.data.level === 2) return h2Style\n                // h2の時\n                else if (header.data.level === 3) return h3Style\n                else otherStyle\n              })()}\n              onClick={() => onClickLink(header.id)}\n            >\n              {header.data.text}\n            </li>\n            {headers.length - 1 !== i && (\n              <hr\n                style={{\n                  color: '#A3A3A3',\n                  opacity: 0.3,\n                }}\n              />\n            )}\n          </Fragment>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import type { OutputBlockData } from '@editorjs/editorjs'\nimport type { HeaderData } from '@editorjs/header'\nimport type { FC } from 'react'\n\nimport {\n  Parser,\n  paragraphParser,\n  imageParser,\n  linkParser,\n  headerParser,\n  listParser,\n  embedParser,\n  quoteParser,\n  paymentLineParser,\n  parser,\n  indexParser,\n} from './previewTools'\n\nconst editorParser = parser({\n  paragraph: paragraphParser as unknown as Parser,\n  header: headerParser as unknown as Parser,\n  list: listParser as unknown as Parser,\n  payment: paymentLineParser as unknown as Parser,\n  image: imageParser as unknown as Parser,\n  link: linkParser as unknown as Parser,\n  embed: embedParser as unknown as Parser,\n  quote: quoteParser as unknown as Parser,\n})\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Props<Type extends string = string, Data extends object = any> = {\n  blocks?: OutputBlockData<Type, Data>[]\n}\n\nconst Preview: FC<Props> = ({ blocks }) => {\n  if (!blocks) return <div />\n  const html = editorParser.parse(blocks)\n  return <div className=\"w-full\">{html}</div>\n}\n\nconst Index: FC<Props> = ({ blocks }) => {\n  if (!blocks) return <div />\n  // filterしてるのでasで型キャスト\n  const html = indexParser(\n    blocks.filter((block) => block.type === 'header') as OutputBlockData<'header', HeaderData>[],\n  )\n  return <div className=\"w-full\">{html}</div>\n}\n\nexport { Preview, Index }\n","import type { OutputData } from '@editorjs/editorjs'\nimport type { HeaderData } from '@editorjs/header'\nimport type { LinkToolData } from '@editorjs/link'\nimport type { ListData } from '@editorjs/nested-list'\nimport type { ParagraphData } from '@editorjs/paragraph'\nimport type { EmbedData } from 'editorjs-embed'\nimport type { ImageToolData } from 'editorjs-image'\nimport type { QuoteData } from 'editorjs-quote'\nimport { useEffect, useState } from 'react'\n\nexport type Counter<T> = (data: T) => number\n\nexport const useEditorCounter = (data?: OutputData) => {\n  const [textCount, setTextCount] = useState<number>(0)\n\n  useEffect(() => {\n    data ? setTextCount(counter(data)) : setTextCount(0)\n  }, [data])\n\n  return textCount\n}\n\nexport const counter = (data: OutputData): number => {\n  let count = 0\n  data.blocks.forEach((item) => {\n    if (item.type === 'paragraph') count += paragraphCounter(item.data)\n    if (item.type === 'link') count += linkCounter(item.data)\n    if (item.type === 'header') count += headerCounter(item.data)\n    if (item.type === 'list') count += listCounter(item.data)\n    if (item.type === 'embed') count += embedCounter(item.data)\n    if (item.type === 'image') count += imageCounter(item.data)\n    if (item.type === 'quote') count += quoteCounter(item.data)\n  })\n  return count\n}\n\nexport const paragraphCounter: Counter<ParagraphData> = ({ text }) => {\n  return text.length\n}\n\nexport const imageCounter: Counter<ImageToolData> = ({ caption }) => {\n  return caption?.length ?? 0\n}\n\nexport const linkCounter: Counter<LinkToolData> = ({ link }) => {\n  return link.length\n}\n\nexport const headerCounter: Counter<HeaderData> = ({ text }) => {\n  return text.length\n}\n\nexport const listCounter: Counter<ListData> = ({ items }) => {\n  const countItem = (data: ListData['items']): number => {\n    return data\n      .map((item) => {\n        return (item.content?.length ?? 0) + countItem(item.items)\n      })\n      .reduce((sum, currentItem) => sum + currentItem, 0)\n  }\n\n  return countItem(items)\n}\n\nexport const embedCounter: Counter<EmbedData | undefined> = (data) => {\n  return data?.source.length ?? 0\n}\n\nexport const quoteCounter: Counter<QuoteData> = ({ text, caption }) => {\n  return text.length + caption.length\n}\n","import type { OutputData } from '@editorjs/editorjs'\nimport type { HeaderData } from '@editorjs/header'\nimport type { LinkToolData } from '@editorjs/link'\nimport type { ListData } from '@editorjs/nested-list'\nimport type { ParagraphData } from '@editorjs/paragraph'\nimport type { QuoteData } from 'editorjs-quote'\n\nexport const isFoundedPreviewURL = (data: string | OutputData): boolean => {\n  const regex = /https?:\\/\\/[\\w.-]+(:\\d+)?\\/article\\/preview\\/[^/\\s?]+(?:[/?][^\\s]*)?/g\n  let isFounded = false\n  if (typeof data === 'string') {\n    isFounded = !!data.match(regex)\n  } else\n    data.blocks.forEach((block) => {\n      if (block.type === 'paragraph') {\n        if ((block.data as ParagraphData).text.match(regex)) isFounded = true\n      }\n      if (block.type === 'header') {\n        if ((block.data as HeaderData).text.match(regex)) isFounded = true\n      }\n      if (block.type === 'list') {\n        const searchItem = (items: ListData['items']) => {\n          items.forEach((item) => {\n            if (item.content?.match(regex)) {\n              isFounded = true\n            }\n            searchItem(item.items)\n          })\n        }\n        searchItem((block.data as ListData).items)\n      }\n      if (block.type === 'link') {\n        if ((block.data as LinkToolData).link.match(regex)) isFounded = true\n      }\n      if (block.type === 'quote') {\n        if ((block.data as QuoteData).text.match(regex)) isFounded = true\n        if ((block.data as QuoteData).caption.match(regex)) isFounded = true\n      }\n    })\n  return isFounded\n}\n","import type { OutputData } from '@editorjs/editorjs'\nimport React, { useCallback, useMemo, useState } from 'react'\n\nimport {\n  Parser,\n  paragraphParser,\n  imageParser,\n  linkParser,\n  headerParser,\n  listParser,\n  embedParser,\n  quoteParser,\n  parser,\n  paymentButton,\n} from './previewTools'\n\nconst editorParser = parser({\n  paragraph: paragraphParser as unknown as Parser,\n  header: headerParser as unknown as Parser,\n  list: listParser as unknown as Parser,\n  image: imageParser as unknown as Parser,\n  link: linkParser as unknown as Parser,\n  embed: embedParser as unknown as Parser,\n  quote: quoteParser as unknown as Parser,\n})\n\ntype Props = {\n  data: OutputData\n  onChange: (data: OutputData) => void\n}\n\nconst SetPaymentLine: React.FC<Props> = ({ data, onChange }) => {\n  const paymentLineIndex: number | undefined = useMemo(() => {\n    const index: number = data.blocks.findIndex((block) => block.type === 'payment')\n    return index === -1 ? undefined : index\n  }, [data])\n\n  const removePaymentFromData = useMemo(() => {\n    return {\n      ...data,\n      blocks: data.blocks.filter((block) => block.type !== 'payment'),\n    }\n  }, [data])\n\n  const html = useMemo(\n    () => editorParser.parse(removePaymentFromData.blocks),\n    [removePaymentFromData],\n  )\n\n  const [value, setValue] = useState<number | undefined>(paymentLineIndex)\n\n  const onChangeValue = useCallback(\n    (index: number) => {\n      if (value === index) {\n        setValue(undefined)\n        onChange(removePaymentFromData)\n      } else {\n        setValue(index)\n        const lastBlockIndex = removePaymentFromData.blocks.length - 1\n        const newData = {\n          ...removePaymentFromData,\n          blocks: removePaymentFromData.blocks.flatMap((block, i) => {\n            if (i === index) {\n              return [\n                {\n                  id: '----------',\n                  type: 'payment',\n                  data: {},\n                },\n                block,\n              ]\n            }\n            // 最後のblockに追加された場合\n            else if (i === lastBlockIndex && i === index - 1) {\n              return [\n                block,\n                {\n                  id: '----------',\n                  type: 'payment',\n                  data: {},\n                },\n              ]\n            }\n            return block\n          }),\n        }\n        onChange(newData)\n      }\n    },\n    [onChange, removePaymentFromData, value],\n  )\n\n  const mappedHtml = useMemo(() => {\n    return html.flatMap((node, i) => {\n      return [\n        node,\n        paymentButton({\n          key: `${i}-payment-button`,\n          value: value === i + 1,\n          onClick: () => {\n            onChangeValue(i + 1)\n          },\n        }),\n      ]\n    })\n  }, [html, onChangeValue, value])\n\n  return <div className=\"w-full\">{mappedHtml}</div>\n}\n\nexport default SetPaymentLine\n"],"names":["paragraphParser","id","data","jsx","classNames","Styles","imageParser","linkParser","anchor","jsxs","headerParser","listParser","orderStyle","orderStyleClass","createItem","items","item","i","embedParser","quoteParser","caption","paymentLineParser","parser","plugins","parsers","parse","blocks","_mapper","block","ParseFunctionError","type","paymentButton","key","value","onClick","indexParser","headers","onClickLink","headerId","el","baseStyle","h2Style","h3Style","header","Fragment","editorParser","Preview","html","Index","useEditorCounter","textCount","setTextCount","useState","useEffect","counter","count","paragraphCounter","linkCounter","headerCounter","listCounter","embedCounter","imageCounter","quoteCounter","text","link","countItem","_a","sum","currentItem","isFoundedPreviewURL","regex","isFounded","searchItem","SetPaymentLine","onChange","paymentLineIndex","useMemo","index","removePaymentFromData","setValue","onChangeValue","useCallback","lastBlockIndex","newData","mappedHtml","node"],"mappings":"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"}